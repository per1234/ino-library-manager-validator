matrix:
  include:
    - name: 'Bash Script Unit Tests'
      language: python
      python: 3.7
      install:
        # Install bats-core
        # https://github.com/bats-core/bats-core
        - git clone https://github.com/bats-core/bats-core.git
        - cd bats-core
        # Get new tags from the remote
        - git fetch --tags
        # Checkout the latest tag
        - git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
        - sudo ./install.sh /usr/local
        - cd ..
        - rm --recursive --force bats-core
        - cd ..
        # install arduino-ci-script
        # https://github.com/per1234/arduino-ci-script
        - git clone https://github.com/per1234/arduino-ci-script.git "${HOME}/scripts/arduino-ci-script"
        - cd "${HOME}/scripts/arduino-ci-script"
        # Get new tags from the remote
        - git fetch --tags
        # Checkout the latest tag
        - git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
      script:
        - cd "${TRAVIS_BUILD_DIR}/tests"
        - bats ino-library-manager-validator.bats


    # lint shell scripts
    # https://github.com/koalaman/shellcheck
    - name: 'ShellCheck'
      language: minimal
      script:
        - find ${TRAVIS_BUILD_DIR} -path "${TRAVIS_BUILD_DIR}/.git" -prune -or \( -name '*.sh' -and -type f \) -print0 | xargs --null --max-lines=1 bash -c 'if ! shellcheck "$0"; then false; fi'


    - name: 'Script Formatting Check'
      language: go
      install:
        # Install shfmt
        # https://github.com/mvdan/sh
        - go get -u mvdan.cc/sh/cmd/shfmt
      script:
        - shfmt -i 2 -d ${TRAVIS_BUILD_DIR}


    - name: 'Python Script Unit Tests'
      language: python
      python: 3.7
      install:
        - cd checkforduplicatelibraryname/tests
      script:
        - python test_checkforduplicatelibraryname.py


    - name: 'PEP8 Compliance Check'
      language: python
      python: 3.7
      install:
        - pip install pycodestyle
      script:
        - find . -path './.git' -prune -name \*.py -exec pycodestyle {} +


    # Check all the files in the repository for consistent formatting
    - name: 'File Formatting Checks'
      language: minimal
      script:
        # Check for files starting with a blank line
        - find ${TRAVIS_BUILD_DIR} -path "${TRAVIS_BUILD_DIR}/.git" -prune -or -type f -print0 | xargs -0 -L1 bash -c 'head -1 "$0" | grep --binary-files=without-match --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at start of $0."; false; fi'
        # Check for true tabs (except for in keywords.txt, which requires it)
        - find ${TRAVIS_BUILD_DIR} -path "${TRAVIS_BUILD_DIR}/.git" -prune -or -type f -exec grep --with-filename --line-number --binary-files=without-match --regexp=$'\t' '{}' \; -exec echo 'Tab found.' \; -exec false '{}' +
        # Check for non-Unix line endings
        - find ${TRAVIS_BUILD_DIR} -path "${TRAVIS_BUILD_DIR}/.git" -prune -or -type f -exec grep --files-with-matches --binary-files=without-match --regexp=$'\r$' '{}' \; -exec echo 'Non-Unix EOL detected.' \; -exec false '{}' +
        # Check for trailing whitespace
        - find ${TRAVIS_BUILD_DIR} -path "${TRAVIS_BUILD_DIR}/.git" -prune -or -type f -exec grep --with-filename --line-number --binary-files=without-match --regexp='[[:blank:]]$' '{}' \; -exec echo 'Trailing whitespace found.' \; -exec false '{}' +
        # Check for extra blank lines at end of files
        - find ${TRAVIS_BUILD_DIR} -path "${TRAVIS_BUILD_DIR}/.git" -prune -or -type f -print0 | xargs -0 -L1 bash -c 'tail -1 "$0" | grep --binary-files=without-match --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at end of $0."; false; fi'


    # Check all files in the repository for commonly misspelled words
    - name: 'Spell Check'
      language: python
      python: 3.7
      install:
        # Install codespell
        # https://github.com/codespell-project/codespell
        - pip install codespell

      script:
        - codespell --skip="${TRAVIS_BUILD_DIR}/.git" --check-hidden --ignore-words-list= "${TRAVIS_BUILD_DIR}"


notifications:
  email:
    on_success: never
    on_failure: always
  webhooks:
    urls:
      # TravisBuddy will comment on any pull request that results in a failing CI build
      - https://www.travisbuddy.com/
    on_success: never
    on_failure: always
